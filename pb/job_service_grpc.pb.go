// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: job_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobService_PostJob_FullMethodName                = "/jobstreet.job.JobService/PostJob"
	JobService_EditJob_FullMethodName                = "/jobstreet.job.JobService/EditJob"
	JobService_CloseJob_FullMethodName               = "/jobstreet.job.JobService/CloseJob"
	JobService_ChangeStatusJobByAdmin_FullMethodName = "/jobstreet.job.JobService/ChangeStatusJobByAdmin"
	JobService_GetJobByID_FullMethodName             = "/jobstreet.job.JobService/GetJobByID"
	JobService_GetJobList_FullMethodName             = "/jobstreet.job.JobService/GetJobList"
	JobService_GetNumberOfJob_FullMethodName         = "/jobstreet.job.JobService/GetNumberOfJob"
	JobService_GetNumberOfNewJob_FullMethodName      = "/jobstreet.job.JobService/GetNumberOfNewJob"
	JobService_GetJobListByAdmin_FullMethodName      = "/jobstreet.job.JobService/GetJobListByAdmin"
	JobService_GetJobListByEmployer_FullMethodName   = "/jobstreet.job.JobService/GetJobListByEmployer"
)

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	PostJob(ctx context.Context, in *PostJobRequest, opts ...grpc.CallOption) (*PostJobResponse, error)
	EditJob(ctx context.Context, in *EditJobRequest, opts ...grpc.CallOption) (*EditJobResponse, error)
	CloseJob(ctx context.Context, in *CloseJobRequest, opts ...grpc.CallOption) (*CloseJobResponse, error)
	ChangeStatusJobByAdmin(ctx context.Context, in *ChangeStatusJobByAdminRequest, opts ...grpc.CallOption) (*ChangeStatusJobByAdminResponse, error)
	GetJobByID(ctx context.Context, in *GetJobByIDRequest, opts ...grpc.CallOption) (*GetJobByIDResponse, error)
	GetJobList(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error)
	GetNumberOfJob(ctx context.Context, in *GetNumberOfJobRequest, opts ...grpc.CallOption) (*GetNumberOfJobResponse, error)
	GetNumberOfNewJob(ctx context.Context, in *GetNumberOfNewJobRequest, opts ...grpc.CallOption) (*GetNumberOfNewJobResponse, error)
	GetJobListByAdmin(ctx context.Context, in *JobListByAdminRequest, opts ...grpc.CallOption) (*JobListResponse, error)
	GetJobListByEmployer(ctx context.Context, in *JobListByEmployerRequest, opts ...grpc.CallOption) (*JobListResponse, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) PostJob(ctx context.Context, in *PostJobRequest, opts ...grpc.CallOption) (*PostJobResponse, error) {
	out := new(PostJobResponse)
	err := c.cc.Invoke(ctx, JobService_PostJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) EditJob(ctx context.Context, in *EditJobRequest, opts ...grpc.CallOption) (*EditJobResponse, error) {
	out := new(EditJobResponse)
	err := c.cc.Invoke(ctx, JobService_EditJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) CloseJob(ctx context.Context, in *CloseJobRequest, opts ...grpc.CallOption) (*CloseJobResponse, error) {
	out := new(CloseJobResponse)
	err := c.cc.Invoke(ctx, JobService_CloseJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ChangeStatusJobByAdmin(ctx context.Context, in *ChangeStatusJobByAdminRequest, opts ...grpc.CallOption) (*ChangeStatusJobByAdminResponse, error) {
	out := new(ChangeStatusJobByAdminResponse)
	err := c.cc.Invoke(ctx, JobService_ChangeStatusJobByAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobByID(ctx context.Context, in *GetJobByIDRequest, opts ...grpc.CallOption) (*GetJobByIDResponse, error) {
	out := new(GetJobByIDResponse)
	err := c.cc.Invoke(ctx, JobService_GetJobByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobList(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := c.cc.Invoke(ctx, JobService_GetJobList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetNumberOfJob(ctx context.Context, in *GetNumberOfJobRequest, opts ...grpc.CallOption) (*GetNumberOfJobResponse, error) {
	out := new(GetNumberOfJobResponse)
	err := c.cc.Invoke(ctx, JobService_GetNumberOfJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetNumberOfNewJob(ctx context.Context, in *GetNumberOfNewJobRequest, opts ...grpc.CallOption) (*GetNumberOfNewJobResponse, error) {
	out := new(GetNumberOfNewJobResponse)
	err := c.cc.Invoke(ctx, JobService_GetNumberOfNewJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobListByAdmin(ctx context.Context, in *JobListByAdminRequest, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := c.cc.Invoke(ctx, JobService_GetJobListByAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobListByEmployer(ctx context.Context, in *JobListByEmployerRequest, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := c.cc.Invoke(ctx, JobService_GetJobListByEmployer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	PostJob(context.Context, *PostJobRequest) (*PostJobResponse, error)
	EditJob(context.Context, *EditJobRequest) (*EditJobResponse, error)
	CloseJob(context.Context, *CloseJobRequest) (*CloseJobResponse, error)
	ChangeStatusJobByAdmin(context.Context, *ChangeStatusJobByAdminRequest) (*ChangeStatusJobByAdminResponse, error)
	GetJobByID(context.Context, *GetJobByIDRequest) (*GetJobByIDResponse, error)
	GetJobList(context.Context, *JobListRequest) (*JobListResponse, error)
	GetNumberOfJob(context.Context, *GetNumberOfJobRequest) (*GetNumberOfJobResponse, error)
	GetNumberOfNewJob(context.Context, *GetNumberOfNewJobRequest) (*GetNumberOfNewJobResponse, error)
	GetJobListByAdmin(context.Context, *JobListByAdminRequest) (*JobListResponse, error)
	GetJobListByEmployer(context.Context, *JobListByEmployerRequest) (*JobListResponse, error)
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) PostJob(context.Context, *PostJobRequest) (*PostJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJob not implemented")
}
func (UnimplementedJobServiceServer) EditJob(context.Context, *EditJobRequest) (*EditJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditJob not implemented")
}
func (UnimplementedJobServiceServer) CloseJob(context.Context, *CloseJobRequest) (*CloseJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseJob not implemented")
}
func (UnimplementedJobServiceServer) ChangeStatusJobByAdmin(context.Context, *ChangeStatusJobByAdminRequest) (*ChangeStatusJobByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatusJobByAdmin not implemented")
}
func (UnimplementedJobServiceServer) GetJobByID(context.Context, *GetJobByIDRequest) (*GetJobByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobByID not implemented")
}
func (UnimplementedJobServiceServer) GetJobList(context.Context, *JobListRequest) (*JobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobList not implemented")
}
func (UnimplementedJobServiceServer) GetNumberOfJob(context.Context, *GetNumberOfJobRequest) (*GetNumberOfJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfJob not implemented")
}
func (UnimplementedJobServiceServer) GetNumberOfNewJob(context.Context, *GetNumberOfNewJobRequest) (*GetNumberOfNewJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfNewJob not implemented")
}
func (UnimplementedJobServiceServer) GetJobListByAdmin(context.Context, *JobListByAdminRequest) (*JobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobListByAdmin not implemented")
}
func (UnimplementedJobServiceServer) GetJobListByEmployer(context.Context, *JobListByEmployerRequest) (*JobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobListByEmployer not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_PostJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).PostJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_PostJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).PostJob(ctx, req.(*PostJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_EditJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).EditJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_EditJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).EditJob(ctx, req.(*EditJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_CloseJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CloseJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_CloseJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CloseJob(ctx, req.(*CloseJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ChangeStatusJobByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusJobByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ChangeStatusJobByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_ChangeStatusJobByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ChangeStatusJobByAdmin(ctx, req.(*ChangeStatusJobByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetJobByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobByID(ctx, req.(*GetJobByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetJobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobList(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetNumberOfJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumberOfJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetNumberOfJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetNumberOfJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetNumberOfJob(ctx, req.(*GetNumberOfJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetNumberOfNewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumberOfNewJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetNumberOfNewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetNumberOfNewJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetNumberOfNewJob(ctx, req.(*GetNumberOfNewJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobListByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobListByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetJobListByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobListByAdmin(ctx, req.(*JobListByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobListByEmployer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListByEmployerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobListByEmployer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetJobListByEmployer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobListByEmployer(ctx, req.(*JobListByEmployerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobstreet.job.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostJob",
			Handler:    _JobService_PostJob_Handler,
		},
		{
			MethodName: "EditJob",
			Handler:    _JobService_EditJob_Handler,
		},
		{
			MethodName: "CloseJob",
			Handler:    _JobService_CloseJob_Handler,
		},
		{
			MethodName: "ChangeStatusJobByAdmin",
			Handler:    _JobService_ChangeStatusJobByAdmin_Handler,
		},
		{
			MethodName: "GetJobByID",
			Handler:    _JobService_GetJobByID_Handler,
		},
		{
			MethodName: "GetJobList",
			Handler:    _JobService_GetJobList_Handler,
		},
		{
			MethodName: "GetNumberOfJob",
			Handler:    _JobService_GetNumberOfJob_Handler,
		},
		{
			MethodName: "GetNumberOfNewJob",
			Handler:    _JobService_GetNumberOfNewJob_Handler,
		},
		{
			MethodName: "GetJobListByAdmin",
			Handler:    _JobService_GetJobListByAdmin_Handler,
		},
		{
			MethodName: "GetJobListByEmployer",
			Handler:    _JobService_GetJobListByEmployer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job_service.proto",
}
