Using docker-compose, same can be achieved as below

version: '3.1'

services:

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      
The connection string is as below, On Host -

const uri = "mongodb://root:example@localhost:27017/
On Container -

const url = 'mongodb://root:example@mongo:27017'
Port mapping can be configured to use a custom host port [8000] like - 8000:27017



version: '3.6'
# Deploys MongoDB with customization scripts and container with Mongo client
# https://fabianlee.org/2018/05/20/docker-using-docker-compose-to-link-a-mongodb-server-and-client/
#
# usage:
# sudo docker-compose build
# sudo docker-compose up


services:
  my-mongodb:
    image: mongo:4.2.3-bionic
    container_name: my-mongodb
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_DATABASE=test
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      # seeding scripts
      - ./mongo-entrypoint:/docker-entrypoint-initdb.d
      # named volumes
      - mongodb:/data/db
      - mongoconfig:/data/configdb
    networks:
      - mongo_net

  my-mongoclient:
    # build will get tagged with 'image'
    build: ./my-mongoclient
    image: fabianlee/my-mongoclient:3.9
    container_name: my-mongoclient
    environment:
      - MONGO_SERVER=my-mongodb
      - MONGO_INITDB_DATABASE=test
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    networks:
      - mongo_net
    depends_on:
      - my-mongodb
    
volumes:
  # default dir on Ubuntu: /var/lib/docker/volumes
  mongodb:
  mongoconfig:

networks:
  mongo_net:
    driver: bridge








	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	graph.NewDatabaseConnection(&config)

	waitGroup, ctx := errgroup.WithContext(ctx)

	server.RunGraphQLServer(ctx, waitGroup, config)

	err = waitGroup.Wait()
	if err != nil {
		log.Fatal().Err(err).Msg("error from wait group")
	}